(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{82:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return r})),n.d(t,"metadata",(function(){return s})),n.d(t,"toc",(function(){return l})),n.d(t,"default",(function(){return b}));var i=n(3),a=n(7),c=(n(0),n(103)),r={id:"api",title:"API Overview",sidebar_label:"Overview",slug:"/api"},s={unversionedId:"api/api",id:"api/api",isDocsHomePage:!1,title:"API Overview",description:"This is currently an alpha build of Net. The API is subject to change.",source:"@site/docs/api/index.md",slug:"/api",permalink:"/rbx-net/docs/2.0.x/api",editUrl:"https://github.com/roblox-aurora/rbx-net/edit/main/docs/docs/api/index.md",version:"current",sidebar_label:"Overview",sidebar:"docs",previous:{title:"Install for TypeScript",permalink:"/rbx-net/docs/2.0.x/install"}},l=[{value:"Net.Server",id:"netserver",children:[{value:"Event",id:"event",children:[]},{value:"Function",id:"function",children:[]},{value:"AsyncFunction",id:"asyncfunction",children:[]},{value:"CrossServerEvent",id:"crossserverevent",children:[]}]},{value:"Net.Client",id:"netclient",children:[{value:"Event",id:"event-1",children:[]},{value:"Function",id:"function-1",children:[]},{value:"AsyncFunction",id:"asyncfunction-1",children:[]},{value:"CrossServerEvent",id:"crossserverevent-1",children:[]}]},{value:"Net.Definitions",id:"netdefinitions",children:[{value:"Create(definitions)",id:"createdefinitions",children:[]},{value:"Function&lt;Server&gt;(...)",id:"functionserver",children:[]},{value:"Event&lt;ServerArgs, ClientArgs&gt;(...)",id:"eventserverargs-clientargs",children:[]},{value:"AsyncFunction&lt;Server, Client&gt;(...)",id:"asyncfunctionserver-client",children:[]}]},{value:"Net.Middleware",id:"netmiddleware",children:[{value:"RateLimit(limit)",id:"ratelimitlimit",children:[]},{value:"RuntimeTypeCheck(...typeCheckers)",id:"runtimetypechecktypecheckers",children:[]}]},{value:"DefinitionBuilder&lt;T&gt;",id:"definitionbuildert",children:[{value:"GetClient(name)",id:"getclientname",children:[]},{value:"CreateServer(name)",id:"createservername",children:[]}]}],o={toc:l};function b(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(c.b)("wrapper",Object(i.a)({},o,n,{components:t,mdxType:"MDXLayout"}),Object(c.b)("div",{className:"admonition admonition-caution alert alert--warning"},Object(c.b)("div",Object(i.a)({parentName:"div"},{className:"admonition-heading"}),Object(c.b)("h5",{parentName:"div"},Object(c.b)("span",Object(i.a)({parentName:"h5"},{className:"admonition-icon"}),Object(c.b)("svg",Object(i.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"}),Object(c.b)("path",Object(i.a)({parentName:"svg"},{fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"})))),"Alpha Build")),Object(c.b)("div",Object(i.a)({parentName:"div"},{className:"admonition-content"}),Object(c.b)("p",{parentName:"div"},"This is currently an alpha build of Net. The API is subject to change."))),Object(c.b)("h2",{id:"netserver"},"Net.Server"),Object(c.b)("p",null,"This contains all the server-related code relating to Net"),Object(c.b)("h3",{id:"event"},"Event"),Object(c.b)("pre",null,Object(c.b)("code",Object(i.a)({parentName:"pre"},{className:"language-ts"}),"class Event\n")),Object(c.b)("h3",{id:"function"},"Function"),Object(c.b)("pre",null,Object(c.b)("code",Object(i.a)({parentName:"pre"},{className:"language-ts"}),"class Function\n")),Object(c.b)("h3",{id:"asyncfunction"},"AsyncFunction"),Object(c.b)("pre",null,Object(c.b)("code",Object(i.a)({parentName:"pre"},{className:"language-ts"}),"class AsyncFunction\n")),Object(c.b)("h3",{id:"crossserverevent"},"CrossServerEvent"),Object(c.b)("pre",null,Object(c.b)("code",Object(i.a)({parentName:"pre"},{className:"language-ts"}),"class CrossServerEvent\n")),Object(c.b)("h2",{id:"netclient"},"Net.Client"),Object(c.b)("p",null,"This contains all the client-related code relating to Net"),Object(c.b)("h3",{id:"event-1"},"Event"),Object(c.b)("pre",null,Object(c.b)("code",Object(i.a)({parentName:"pre"},{className:"language-ts"}),"class Event\n")),Object(c.b)("h3",{id:"function-1"},"Function"),Object(c.b)("pre",null,Object(c.b)("code",Object(i.a)({parentName:"pre"},{className:"language-ts"}),"class Function\n")),Object(c.b)("h3",{id:"asyncfunction-1"},"AsyncFunction"),Object(c.b)("pre",null,Object(c.b)("code",Object(i.a)({parentName:"pre"},{className:"language-ts"}),"class AsyncFunction\n")),Object(c.b)("h3",{id:"crossserverevent-1"},"CrossServerEvent"),Object(c.b)("pre",null,Object(c.b)("code",Object(i.a)({parentName:"pre"},{className:"language-ts"}),"class CrossServerEvent\n")),Object(c.b)("h2",{id:"netdefinitions"},"Net.Definitions"),Object(c.b)("p",null,"This namespace is for the Definitions feature."),Object(c.b)("h3",{id:"createdefinitions"},"Create(definitions)"),Object(c.b)("pre",null,Object(c.b)("code",Object(i.a)({parentName:"pre"},{className:"language-ts"}),"function Create<T extends RemoteDeclarations>(remotes: T): DefinitionBuilder<T>\n")),Object(c.b)("p",null,"see ",Object(c.b)("a",Object(i.a)({parentName:"p"},{href:"#definitionbuildert"}),"DefinitionBuilder")),Object(c.b)("h3",{id:"functionserver"},"Function","<","Server",">","(...)"),Object(c.b)("p",null,"Definition function for creating a ",Object(c.b)("inlineCode",{parentName:"p"},"FunctionDefinition")),Object(c.b)("h3",{id:"eventserverargs-clientargs"},"Event","<","ServerArgs, ClientArgs",">","(...)"),Object(c.b)("p",null,"Definition function for creating an ",Object(c.b)("inlineCode",{parentName:"p"},"EventDefinition")),Object(c.b)("h3",{id:"asyncfunctionserver-client"},"AsyncFunction","<","Server, Client",">","(...)"),Object(c.b)("p",null,"Definition function for creating an ",Object(c.b)("inlineCode",{parentName:"p"},"AsyncDefinition")),Object(c.b)("h2",{id:"netmiddleware"},"Net.Middleware"),Object(c.b)("p",null,"This namespace contains built-in middleware for RbxNet."),Object(c.b)("h3",{id:"ratelimitlimit"},"RateLimit(limit)"),Object(c.b)("h3",{id:"runtimetypechecktypecheckers"},"RuntimeTypeCheck(...typeCheckers)"),Object(c.b)("h2",{id:"definitionbuildert"},"DefinitionBuilder","<","T",">"),Object(c.b)("pre",null,Object(c.b)("code",Object(i.a)({parentName:"pre"},{className:"language-ts"}),"class DefinitionBuilder<T extends RemoteDeclarations> {\n    GetAllClient(): ClientBuildResult<T>;\n    GetClient(name: keyof T): ClientEvent | ClientAsyncFunction | ClientFunction;\n    CreateAllServer(): ServerBuildResult<T>;\n    CreateServer(name: keyof T): ClientEvent | ClientAsyncFunction | ClientFunction;\n}\n")),Object(c.b)("h4",{id:"example-usage"},"Example Usage"),Object(c.b)("p",null,"The definitions should be placed in a shared file:"),Object(c.b)("pre",null,Object(c.b)("code",Object(i.a)({parentName:"pre"},{className:"language-ts",metastring:'title="shared/remotes.ts"',title:'"shared/remotes.ts"'}),'import Net from "@rbxts/net";\nconst MyDefinitions = Net.Definitions.Create({\n    TestRemote: Net.Definitions.AsyncFunction<(name: string) => boolean>()\n});\n')),Object(c.b)("h3",{id:"getclientname"},"GetClient(name)"),Object(c.b)("p",null,"Gets the specified remote definition and gets the client version of the event/function/asyncfunction"),Object(c.b)("pre",null,Object(c.b)("code",Object(i.a)({parentName:"pre"},{className:"language-ts",metastring:'title="client/example.client.ts"',title:'"client/example.client.ts"'}),'import MyDefinitions from "shared/remotes.ts";\nconst TestRemote = MyDefinitions.GetClient("TestRemote");\n')),Object(c.b)("h3",{id:"createservername"},"CreateServer(name)"),Object(c.b)("p",null,"Creates the specified remote definition on the server"),Object(c.b)("pre",null,Object(c.b)("code",Object(i.a)({parentName:"pre"},{className:"language-ts",metastring:'title="server/example.server.ts"',title:'"server/example.server.ts"'}),'import MyDefinitions from "shared/remotes.ts";\nconst TestRemote = MyDefinitions.CreateServer("TestRemote");\n')))}b.isMDXComponent=!0}}]);