(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{115:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return d}));var r=n(0),s=n.n(r);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,s=function(e,t){if(null==e)return{};var n,r,s={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var c=s.a.createContext({}),m=function(e){var t=s.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=m(e.components);return s.a.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return s.a.createElement(s.a.Fragment,{},t)}},b=s.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,i=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=m(n),b=r,d=p["".concat(i,".").concat(b)]||p[b]||u[b]||a;return n?s.a.createElement(d,o(o({ref:t},c),{},{components:n})):s.a.createElement(d,o({ref:t},c))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=b;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var c=2;c<a;c++)i[c]=n[c];return s.a.createElement.apply(null,i)}return s.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"},93:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return o})),n.d(t,"toc",(function(){return l})),n.d(t,"default",(function(){return m}));var r=n(3),s=n(7),a=(n(0),n(115)),i={id:"definitions",title:"Leveraging the Definitions API",sidebar_label:"Definitions Overview",slug:"/definitions"},o={unversionedId:"guides/definitions",id:"guides/definitions",isDocsHomePage:!1,title:"Leveraging the Definitions API",description:"The Definitions API is still very experimental, and subject to change.",source:"@site/docs/guides/definitions.md",slug:"/definitions",permalink:"/rbx-net/docs/2.0/definitions",editUrl:"https://github.com/roblox-aurora/rbx-net/edit/main/docs/docs/guides/definitions.md",version:"current",sidebar_label:"Definitions Overview",sidebar:"docs",previous:{title:"Basics",permalink:"/rbx-net/docs/2.0/basic-usage"},next:{title:"Using Compile Time Remote IDs",permalink:"/rbx-net/docs/2.0/uuid"}},l=[{value:"The standard way",id:"the-standard-way",children:[]},{value:"Definitions, oh my!",id:"definitions-oh-my",children:[]}],c={toc:l};function m(e){var t=e.components,n=Object(s.a)(e,["components"]);return Object(a.b)("wrapper",Object(r.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("div",{className:"admonition admonition-caution alert alert--warning"},Object(a.b)("div",Object(r.a)({parentName:"div"},{className:"admonition-heading"}),Object(a.b)("h5",{parentName:"div"},Object(a.b)("span",Object(r.a)({parentName:"h5"},{className:"admonition-icon"}),Object(a.b)("svg",Object(r.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"}),Object(a.b)("path",Object(r.a)({parentName:"svg"},{fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"})))),"caution")),Object(a.b)("div",Object(r.a)({parentName:"div"},{className:"admonition-content"}),Object(a.b)("p",{parentName:"div"},"The ",Object(a.b)("inlineCode",{parentName:"p"},"Definitions")," API is still very experimental, and subject to change."))),Object(a.b)("p",null,"When designing your networking objects, it may become cumbersome to keep references to all your remotes all over the place."),Object(a.b)("h2",{id:"the-standard-way"},"The standard way"),Object(a.b)("p",null,"You may define a remote on the server, as such:"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-ts",metastring:'title="server/test.server.ts"',title:'"server/test.server.ts"'}),'import Net from "@rbxts/net";\nconst PrintMessage = new Net.Server.Event<[message: string]>("PrintMessage");\nconst MakeHello = new Net.Server.AsyncFunction<[input: string], []>("MakeHello");\n\nPrintMessage.Connect((message) => {\n    print(message);\n});\nMakeHello.SetCallback((message) => `Hello, ${message}!`);\n')),Object(a.b)("p",null,"And then of course, a parallel client remote on the client."),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-ts",metastring:'title="client/test.client.ts"',title:'"client/test.client.ts"'}),'import Net from "@rbxts/net";\nconst PrintMessage = new Net.Client.Event<[], [message: string]>("PrintMessage");\nconst MakeHello = new Net.Client.AsyncFunction<[], [message: string], string>("MakeHello");\n\nPrintMessage.SendToServer("Hello there!");\nMakeHello.CallServerAsync("Roblox").then(result => {\n    print(result); // Should be Hello, Roblox!\n});\n')),Object(a.b)("p",null,"While this works very well, you may want a single place to reference ",Object(a.b)("em",{parentName:"p"},"all")," your remote objects and handle all the types for you. As you can see above, maintaining types could get very hectic. This is where ",Object(a.b)("inlineCode",{parentName:"p"},"Definitions")," come in."),Object(a.b)("h2",{id:"definitions-oh-my"},"Definitions, oh my!"),Object(a.b)("p",null,"One of the new cool features of v2.0 is the ",Object(a.b)("a",Object(r.a)({parentName:"p"},{href:"api/definitions"}),"Net.Definitions")," namespace. Now we can define our remotes in a single place, rather than having to maintain separate references:"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-ts",metastring:'title="shared/remotes.ts"',title:'"shared/remotes.ts"'}),'import Net from "@rbxts/net";\n\nconst Remotes = Net.Definitions.Create({\n  PrintMessage: Net.Definitions.Event<[message: string, other: string]>(),\n  MakeHello: Net.Definitions.AsyncFunction<(message: string) => string>(),\n});\n\nexport { Remotes };\n')),Object(a.b)("p",null,"And how do we use these in the client and server?"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-ts",metastring:'title="server/test.server.ts"',title:'"server/test.server.ts"'}),'import { Remotes } from "shared/remotes";\n\n// listen to messages\nconst PrintMessage = Remotes.CreateServer("PrintMessage");\nPrintMessage.Connect((player, message, other) => {\n  print(`Server recieved message: ${message} from player: ${player} ${other}`);\n});\n\n// listen and respond to messages\nconst MakeHello = Remotes.CreateServer("MakeHello");\nMakeHello.SetCallback((player, message) => {\n  print(`Server got an async message from ${player} containing the message ${message}`);\n  return `Hello, ${player}! We got your message: ${message}`;\n});\n')),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-ts",metastring:'title="client/test.client.ts"',title:'"client/test.client.ts"'}),'import { Remotes } from "shared/remotes";\n\n// send a message to the server\nconst PrintMessage = Remotes.GetClient("PrintMessage");\nPrintMessage.SendToServer("Hello there!", "other");\n\n// send a message to the server, while listening for a response\nconst MakeHello = Remotes.GetClient("MakeHello");\nMakeHello.CallServerAsync("Net is cool right??").then((result) => {\n  print(`Client got a response to the async message from server: ${result}`);\n});\n')),Object(a.b)("p",null,"Simple! note the lack of needing type information outside of the definitions file. If you want to use your definitions in multiple places, you don't have to worry about your types being out of sync!"))}m.isMDXComponent=!0}}]);