(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{115:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return d}));var r=n(0),s=n.n(r);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,s=function(e,t){if(null==e)return{};var n,r,s={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var l=s.a.createContext({}),u=function(e){var t=s.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=u(e.components);return s.a.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return s.a.createElement(s.a.Fragment,{},t)}},g=s.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,o=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),p=u(n),g=r,d=p["".concat(o,".").concat(g)]||p[g]||m[g]||a;return n?s.a.createElement(d,i(i({ref:t},l),{},{components:n})):s.a.createElement(d,i({ref:t},l))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,o=new Array(a);o[0]=g;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:r,o[1]=i;for(var l=2;l<a;l++)o[l]=n[l];return s.a.createElement.apply(null,o)}return s.a.createElement.apply(null,n)}g.displayName="MDXCreateElement"},75:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return i})),n.d(t,"toc",(function(){return c})),n.d(t,"default",(function(){return u}));var r=n(3),s=n(7),a=(n(0),n(115)),o={id:"basics",title:"Basics",sidebar_label:"Basics",slug:"/basic-usage"},i={unversionedId:"guides/basics",id:"guides/basics",isDocsHomePage:!1,title:"Basics",description:"Quick Start",source:"@site/docs/guides/basic-usage.md",slug:"/basic-usage",permalink:"/rbx-net/docs/2.0/basic-usage",editUrl:"https://github.com/roblox-aurora/rbx-net/edit/main/docs/docs/guides/basic-usage.md",version:"current",sidebar_label:"Basics",sidebar:"docs",previous:{title:"Install for Luau",permalink:"/rbx-net/docs/2.0/install-luau"},next:{title:"Leveraging the Definitions API",permalink:"/rbx-net/docs/2.0/definitions"}},c=[{value:"Quick Start",id:"quick-start",children:[]}],l={toc:c};function u(e){var t=e.components,n=Object(s.a)(e,["components"]);return Object(a.b)("wrapper",Object(r.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("h2",{id:"quick-start"},"Quick Start"),Object(a.b)("p",null,"Three files are needed to get started:"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-ts",metastring:'title="shared/remotes.ts"',title:'"shared/remotes.ts"'}),'import Net from "@rbxts/net";\n\nconst Remotes = Net.Definitions.Create({\n  PrintMessage: Net.Definitions.Event<[message: string, other: string]>(),\n  MakeHello: Net.Definitions.AsyncFunction<(message: string) => string>(),\n});\n\nexport { Remotes };\n')),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-ts",metastring:'title="server/test.server.ts"',title:'"server/test.server.ts"'}),'import { Remotes } from "shared/remotes";\n\n// listen to messages\nconst PrintMessage = Remotes.CreateServer("PrintMessage");\nPrintMessage.Connect((player, message, other) => {\n  print(`Server recieved message: ${message} from player: ${player} ${other}`);\n});\n\n// listen and respond to messages\nconst MakeHello = Remotes.CreateServer("MakeHello");\nMakeHello.SetCallback((player, message) => {\n  print(`Server got an async message from ${player} containing the message ${message}`);\n  return `Hello, ${player}! We got your message: ${message}`;\n});\n')),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-ts",metastring:'title="client/test.client.ts"',title:'"client/test.client.ts"'}),'import { Remotes } from "shared/remotes";\n\n// send a message to the server\nconst PrintMessage = Remotes.GetClient("PrintMessage");\nPrintMessage.SendToServer("Hello there!", "other");\n\n// send a message to the server, while listening for a response\nconst MakeHello = Remotes.GetClient("MakeHello");\nMakeHello.CallServerAsync("Net is cool right??").then((result) => {\n  print(`Client got a response to the async message from server: ${result}`);\n});\n')),Object(a.b)("p",null,"And away you go - just get editing the remotes file to add your own definitions!"))}u.isMDXComponent=!0}}]);